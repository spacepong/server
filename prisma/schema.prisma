// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Status {
    ONLINE
    OFFLINE
    AWAY
}

model User {
    id              String      @id @default(uuid())
    connection      Connection?
    avatar          Avatar?
    username        String?     @unique @db.VarChar(8)
    profileComplete Boolean     @default(false)
    rank            Int         @default(100)
    followed        String[]
    blocked         String[]
    status          Status      @default(ONLINE)
    won             Match[]     @relation("WonMatch")
    lost            Match[]     @relation("LostMatch")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("users")
}

model Match {
    id       String   @id @default(uuid())
    score    Int[]    @default([0, 0])
    winnerId String   @unique
    loserId  String   @unique
    date     DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    winner User @relation("WonMatch", fields: [winnerId], references: [id])
    loser  User @relation("LostMatch", fields: [loserId], references: [id])

    @@map("matches")
}

model Connection {
    id           String  @id @default(uuid())
    userId       String  @unique
    email        String? @unique
    password     String?
    refreshToken String?
    otp          String?
    intra_42     Int?    @unique

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("connections")
}

model Avatar {
    id       String @id @default(uuid())
    userId   String @unique
    filename String
    data     Bytes

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])

    @@map("avatars")
}
