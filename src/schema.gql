# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Achievement {
  """Date the achievement was created"""
  createdAt: DateTime!

  """Description of the achievement"""
  description: String!

  """Icon of the achievement"""
  icon: String!

  """Unique identifier for the achievement"""
  id: String!

  """Name of the achievement"""
  name: String!

  """Date the achievement was updated"""
  updatedAt: DateTime!

  """The associated user achievement entities"""
  users: [UserAchievement!]
}

type Auth {
  """The 2FA validation"""
  is2faValid: Boolean

  """The OTP URL"""
  otpAuthUrl: String

  """The status"""
  status: String

  """The user object"""
  user: User
}

type Avatar {
  """The date when the avatar was created"""
  createdAt: DateTime!

  """Default filename of the avatar"""
  defaultFilename: String!

  """Filename of the avatar"""
  filename: String!

  """Unique identifier for the avatar"""
  id: String!

  """The date when the avatar was last updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User

  """The ID of the associated user"""
  userId: String!
}

type Channel {
  """Unique identifiers for the channel admins"""
  adminIds: [String!]!

  """Date the channel was created"""
  createdAt: DateTime!

  """Description of the channel"""
  description: String

  """Unique identifier for the channel"""
  id: String!

  """Kicks associated with the channel"""
  kicks: [Kick!]!

  """Messages associated with the channel"""
  messages: [Message!]!

  """Mutes associated with the channel"""
  mutes: [Mute!]!

  """Name of the channel"""
  name: String

  """Unique identifier for the channel owner"""
  ownerId: String

  """Password of the channel"""
  password: String

  """Type of the channel"""
  type: String!

  """Date the channel was last updated"""
  updatedAt: DateTime!

  """Members of the channel"""
  users: [User!]!
}

type Connection {
  """The date when the connection was created"""
  createdAt: DateTime!

  """Unique identifier for the connection"""
  id: String!

  """The intra_42 identifier associated with the connection"""
  intra_42: Int

  """
  Indicates whether two-factor authentication is enabled for the connection
  """
  is2faEnabled: Boolean!

  """One-time password associated with the connection"""
  otp: String

  """The date when the one-time password was created"""
  otpCreatedAt: DateTime

  """The date when the connection was last updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User

  """The ID of the associated user"""
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Kick {
  """The associated channel entity"""
  channel: Channel!

  """ID of the associated channel"""
  channelId: String!

  """Date and time the kick was created"""
  createdAt: DateTime!

  """Unique identifier for the kick"""
  id: String!

  """Reason for the kick"""
  reason: String

  """Date and time the kick was last updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User!

  """ID of the associated user"""
  userId: String!
}

type Match {
  """The date when the match was created"""
  createdAt: DateTime!

  """The date of the match"""
  date: DateTime!

  """Unique identifier for the match"""
  id: String!

  """The loser of the match"""
  loser: User!

  """The ID of the loser"""
  loserId: String!

  """The score of the match"""
  score: [Int!]!

  """The date when the match was updated"""
  updatedAt: DateTime!

  """The winner of the match"""
  winner: User!

  """The ID of the winner"""
  winnerId: String!
}

type Message {
  """The associated channel entity"""
  channel: Channel!

  """ID of the associated channel"""
  channelId: String!

  """The date when the message was created"""
  createdAt: DateTime!

  """Unique identifier for the message"""
  id: String!

  """Invite to a game"""
  invite: String

  """Photo of the message"""
  photo: String

  """IDs of the users who have seen the message"""
  seenBy: [String!]!

  """Text of the message"""
  text: String

  """Whether or not the message is unsent"""
  unsent: Boolean!

  """The date when the message was last updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User!

  """ID of the associated user"""
  userId: String!
}

type Mutation {
  """Blocks a user"""
  blockUser(blockId: String!, userId: String!): User!

  """Creates all achievements"""
  createAchievements: [Achievement!]!

  """Create a new channel"""
  createChannel(newChannelInput: NewChannelInput!): Channel!

  """Creates a new match with the given data"""
  createMatch(newMatchInput: NewMatchInput!): Match!

  """Create user achievements for a user."""
  createUserAchievements(userId: String!): User!

  """Deletes an achievement"""
  deleteAchievement(achievementId: String!): Achievement!

  """Deletes all achievements"""
  deleteAllAchievements: String!

  """Deletes all matches in development environment"""
  deleteAllMatches: String!

  """Deletes all users in development environment"""
  deleteAllUsers: String!

  """Deletes a user"""
  deleteUser(userId: String!): User!

  """Follows a user"""
  followUser(followId: String!, userId: String!): User!

  """Generates a 2FA token for the current user"""
  generate2faToken(userId: String!, username: String!): Auth!

  """Refreshes all users achievements"""
  refreshUsersAchievements: [Achievement!]!

  """Turns off 2FA for the current user"""
  turnOff2fa(token: String!, userId: String!): Auth!

  """Turns on 2FA for the current user"""
  turnOn2fa(token: String!, userId: String!): Auth!

  """Unblocks a user"""
  unblockUser(unblockId: String!, userId: String!): User!

  """Unfollows a user"""
  unfollowUser(unfollowId: String!, userId: String!): User!

  """Updates an achievement"""
  updateAchievement(achievementId: String!, updateAchievementInput: UpdateAchievementInput!): Achievement!

  """Updates the avatar of a user"""
  updateAvatar(avatar: String!, userId: String!): User!

  """Update an achievement of a user."""
  updateUserAchievement(achievementId: String!, isAchieved: Boolean!, userId: String!): UserAchievement!

  """Updates the username of a user"""
  updateUsername(userId: String!, username: String!): User!

  """Verifies a 2FA token for the current user"""
  verify2fa(token: String!, userId: String!): Auth!
}

type Mute {
  """The associated channel entity"""
  channel: Channel!

  """ID of the associated channel"""
  channelId: String!

  """Date and time the mute was created"""
  createdAt: DateTime!

  """Duration of the mute"""
  duration: Int!

  """Unique identifier for the mute"""
  id: String!

  """Reason for the mute"""
  reason: String

  """Date and time the mute was last updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User!

  """ID of the associated user"""
  userId: String!
}

input NewChannelInput {
  """Description of the channel"""
  description: String

  """Name of the channel"""
  name: String

  """Owner of the channel"""
  ownerId: String

  """Password of the channel"""
  password: String

  """Type of the channel"""
  type: String!

  """Users of the channel"""
  userIds: [String!]
}

input NewMatchInput {
  """The ID of the loser"""
  loserId: String!

  """The score of the match"""
  score: [Int!]!

  """The ID of the winner"""
  winnerId: String!
}

type Query {
  """Gets an achievement by ID"""
  getAchievementById(achievementId: String!): Achievement!

  """Gets all achievements"""
  getAllAchievements: [Achievement!]!

  """Retrieves all matches with their associated data"""
  getAllMatches: [Match!]!

  """Retrieves all users with their associated data"""
  getAllUsers: [User!]!

  """Retrieves a match by its ID with associated data"""
  getMatchById(matchId: String!): Match!

  """Retrieves all matches for a user by their ID"""
  getMatchesByUserId(userId: String!): [Match!]!

  """Get achievements of a user."""
  getUserAchievements(userId: String!): [UserAchievement!]!

  """Retrieves a user by their ID with associated data"""
  getUserById(id: String!): User!

  """Retrieves a list of matches by their IDs"""
  populateMatchIds(matchIds: [String!]!): [Match!]!

  """Retrieves a list of users by their IDs"""
  populateUserIds(userIds: [String!]!): [User!]!
}

input UpdateAchievementInput {
  """Achievement description"""
  description: String

  """Achievement icon"""
  icon: String

  """Achievement name"""
  name: String
}

type User {
  """Achievements of the user"""
  achievements: [UserAchievement!]!

  """The associated avatar entity"""
  avatar: Avatar

  """Users the user is blocking"""
  blocked: [String!]!

  """The associated connection entity"""
  connection: Connection

  """Date the user was created"""
  createdAt: DateTime!

  """Users the user is following"""
  following: [String!]!

  """Unique identifier for the user"""
  id: String!

  """Whether or not the user is an admin"""
  isAdmin: Boolean!

  """Last time the user was online"""
  lastOnline: DateTime!

  """Games lost by the user"""
  lost: [Match!]!

  """User rank"""
  rank: Int!

  """Date the user was last updated"""
  updatedAt: DateTime!

  """Username chosen by the user"""
  username: String

  """Games won by the user"""
  won: [Match!]!
}

type UserAchievement {
  """Date the user achievement was achieved"""
  achievedAt: DateTime

  """The associated achievement entity"""
  achievement: Achievement

  """Unique identifier for the achievement"""
  achievementId: String!

  """Date the user achievement was created"""
  createdAt: DateTime!

  """Unique identifier for the user achievement"""
  id: String!

  """Whether the user achievement is achieved"""
  isAchieved: Boolean!

  """Date the user achievement was updated"""
  updatedAt: DateTime!

  """The associated user entity"""
  user: User

  """Unique identifier for the user"""
  userId: String!
}